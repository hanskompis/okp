\documentclass[11pt,oneside,a4paper]{article}
%\usepackage{ucs}
\usepackage{url}
\usepackage{hyperref}
\usepackage{lmodern}
\usepackage[pdftex]{graphicx}
\usepackage{textcomp}
\usepackage[latin1]{inputenc}
\usepackage[finnish]{babel}
\usepackage[T1]{fontenc}
\author{Jari Koskinen, Hansi Keijonen, Eero Laine}
\title{Ohjelmointikielten periaatteet 2013} 




\begin{document}
% kirjoita nimi‰
\maketitle

\pagebreak

\tableofcontents

\pagebreak

\section{D-ohjelmointikieli}
D-ohjelmointikieli on C/C++-kielten pohjalta kehitetty, ja sen p‰‰asiallisena kehitt‰j‰n‰ on alusta l‰htien toiminut ohjelmointikielten k‰‰nt‰jiin erikoistunut Walter Bright. Kehitystyˆ on alkanut vuonna 1999 ja ensimm‰inen julkaisu k‰‰nt‰j‰st‰ on tehty vuonna 2001 Brightin omistaman yhtiˆn Digital Marsin toimesta. Ensimm‰inen vakiintunut versio 1.0 julkaistiin kuitenkin vasta vuonna 2007. D-kielen nykyinen versio on 2.0, ja kielen kehitys jatkuu edelleen. Mukaan on myˆs liittynyt useita kehitt‰ji‰ Brightin rinnalle. Version 2.0 pohjalta on julkaistu vuonna 2010 Andrei Alexandrescun kirjoittama kirja The D Programming Language, jonka myˆt‰ version voidaan katsoa vakiintuneen.

Versio 1.0 kattoi imperatiivisen paradigman, oliopohjaisen paradigman ja metaohjelmointiparadgiman. Versio 2.0 toi mukanaan tuen funktionaaliselle ohjelmoinnille ja aktorimallin rinnakkaisohjelmointiin. T‰ss‰ kirjoituksessa k‰sitell‰‰n kielen versiota 2.0. Kieli sis‰lt‰‰ paljon uudistuksia, jotka ovat parannuksia C/C++-kieliin tai muiden kielten, kuten C\#:n 
ja Javan hyˆdylliseksi havaittuja ominaisuuksia. Samalla kielest‰ on pyritty j‰tt‰m‰‰n pois C/C++- kielten taaksep‰in yhteensopivuuden asettamia rajoitteita.

D on moniparadigmainen, oliopohjainen ja imperatiivinen ohjelmointikieli. D tarjoaa tuen myˆs funktionaaliselle ja metaohjelmoinnille. D:ll‰ kirjoitetut ohjelmat k‰‰nnet‰‰n k‰‰nnˆs- ja linkitysvaiheen kautta kohdeymp‰ristˆn konekielelle. Ohjelmoijalla on t‰ysi p‰‰sy laitetasolle, joten D soveltuu myˆs k‰yttˆj‰rjestelmien ohjelmointiin. Muistinhallinta voidaan j‰tt‰‰ automatiikan huoleksi, koska D sis‰lt‰‰ C\#:n ja Javan tapaan roskienkeruun, mutta sallii muistink‰sittelyn myˆs C/C++:lle tyypillisen tapaan. Perint‰ on toteutettu yksinkertaisella perinn‰ll‰, rajapinnoilla ja mixineill‰. Kielen syntaksi muistuttaa hyvin paljon C++-kielen syntaksia.

Alla on esimerkki ohjelmasta, joka palauttaa annettua lukua suuremman Fibonaccin luvun.

\begin{verbatim}
1.  import std.stdio;
2.  import std.conv;
3. 
4.  void main(string[] args) {
5.  uint f;
6.   try {
7.    f = parse!uint(args[1]);
8.   }
9.   catch {
10.   writeln("Error in arguments!");
11.   return;
12.  }
13.  writeln(args[1]);
14.  writeln(fib(f));
15. }
16. 
17. ulong fib(uint n) {
18.  ulong iter(ulong fib_1, ulong fib_2) {
19.   return fib_2 > n ? fib_2 : iter(fib_1 + fib_2, fib_1);
20.  }
21.  return iter(1, 0);
22. }
\end{verbatim}
Ohjelmakoodin toiminta on seuraavanlainen: riveill‰ 1 ja 2 ladataan k‰yttˆˆn kirjastot syˆtˆn ja tulostuksen k‰sittely‰ (std.stdio) ja tyyppimuunnoksia (std.conv) varten. Rivill‰ 7 muunnetaan saatu tekstimuotoinen parametri etumerkittˆm‰ksi kokonaisluvuksi. Rivit 9 - 11 ovat virheenk‰sittely‰ varten, ja virheen sattuessa ohjelmasta poistutaan. Rivill‰ 14 kutsutaan fib-funktiota. Fib-funktiossa on riveill‰ 18 ja 19 oma sis‰funktio, joka suorittaa varsinaisen laskennan. Sis‰funktiota kutsutaan ulomman funktion viimeisell‰ rivill‰ 21. Kyseess‰ on t‰llˆin h‰nt‰rekursio, jota varten D-kieless‰ on optimoija.


\section{Erlang-ohjelmointikieli}
Erlang on funktionaalinen kieli, joka on tarkoitettu hajautettujen j‰rjestelmien ohjelmointiin. Erlang soveltuu tosiaikaj‰rjestelmien ja laajasti skaalautuvien j‰rjestelmien, kuten puhelinkeskusten, pankkij‰rjestelmien ja s‰hkˆisen liiketoiminnan kehitt‰miseen. Kieli sis‰lt‰‰ laajan tuen rinnakkaisuudelle ja mahdollistaa eritt‰in vikasietoisten j‰rjestelmien kehitt‰misen. Erlangin kehitt‰misen aloitti Joe Armstrong vuonna 1986 Ericsson-yhtiˆss‰. Alunperin kieli on ollut suljetussa k‰ytˆss‰, mutta se julkaistiin avoimena vuonna 1998. Erlangin tietotyypit ovat dynaamisesti ja vahvasti tyypitettyj‰.

Ohjelma, joka tulostaa ensimm‰isen syˆttˆlukua suuremman Fibonaccin luvun, n‰ytt‰‰ Erlangilla seuraavalta. Kommentit alkavat \%-merkill‰. Ohjelman toimintaa selvent‰v‰t numeroidut kommentit on selitetty koodin alla. 
\begin{verbatim}
1.  -module(fibo).
2.  -export([fibo/1, compfibo/2, fiboplus/1]).
3.       fiboplus(N) -> compfibo(N,0).
4.       compfibo(N,S) -> Curr = fibo(S),
5.            if Curr > N -> Curr;
6.            true -> compfibo(N,S+1)
7.            end. 
8.  fibo(0) -> 0 ;
9.  fibo(1) -> 1 ;
10. fibo(N) when N > 1 -> fibo(N-1) + fibo(N-2) .
\end{verbatim}
Ohjelman suorittaminen n‰ytt‰‰ t‰lt‰:
\begin{verbatim}
1>fibo(0) -> 0 ;
2>fibo(1) -> 1 ;
3>fibo(N) when N > 1 -> fibo(N-1) + fibo(N-2) .
\end{verbatim}

Ensimm‰isen‰ tulee m‰‰ritell‰ moduulin nimi, t‰ss‰ tapauksessa 'fibo', rivill‰ 1. Jotta moduulissa olevia metodeita pystyt‰‰n kutsumaan ohjelman ulkopuolelta, tulee ne m‰‰ritell‰ export-lauseella, kuten rivill‰ 2 on tehty. Jokaisen m‰‰rityksen yhteydess‰ ilmoitetaan kutsussa tarvittavien parametrien m‰‰r‰. Rivill‰ 3 on varsinainen p‰‰metodi, jota kutsutaan halutulla parametrilla. Parametrina annetaan siis luku, jota suuremman (ensimm‰isen) Fibonaccin luvun ohjelma laskee. Kyseess‰ oleva metodi kutsuu ainoastaan apumetodia compfibo, lis‰ten mukaan apuparametrin, joka pit‰‰ kirjaa siit‰, monettako Fibonaccin lukua kulloinkin haetaan. 
Rivill‰ 4 compfibo-metodi tallettaa ensimm‰isen‰ muuttujaan Curr Fibonaccin sarjan S:nen luvun. Jos t‰m‰ luku on suurempi kuin alkuper‰inen annettu luku N, se palautetaan. Muussa tapauksessa compfibo-metodia kutsutaan uudelleen siten, ett‰ parametrin S arvoa kasvatetaan yhdell‰. N‰in seuraavalla kutsukerralla tutkitaan j‰rjestyksess‰ seuraavaa Fibonaccin lukua. Rivill‰ 5 fibo-metodi laskee Fibonaccin N:nen luvun. Toimintatapa metodissa on hahmonsovitus, joka on yleinen myˆs Haskell-ohjelmointikieless‰. 

\section{Kielten alkiorakenteen vertailu}


\subsection{D-kielen alkiorakenteen vertailua}

D-kielen tunnuksissa voi olla kirjaimia, alaviivoja tai ISO/IEC 9899:1999(E)-standardissa m‰‰riteltyj‰ merkkej‰ (universal alphas), ja ensimm‰ist‰ merkki‰ lukuunottamatta myˆs numerot ovat k‰ytˆss‰. Tunnusta ei voi myˆsk‰‰n aloittaa kahdella alaviivalla. D-kieli on "case sensitive", eli isot ja pienet kirjaimet on eroteltu toisistaan. Varattuja sanoja on noin sata, esimerkiksi Javastakin lˆytyv‰t termit abstract, final, switch ja class. Rivinvaihdoilla ja sisennyksill‰ ei D-kieless‰ ole kielen suorituksen kannalta merkityst‰.

Merkkijonoliteraali on D:ss‰ joko merkkijono kaksinkertaisissa lainausmerkeiss‰, wysiwyg-merkkijono, ohjausmerkki (escape sequence), rajattu merkkijono (delimited string), j‰rjestetty merkkijono tai heksamerkkijono. Rivin loppumista kuvaava \textbackslash n lasketaan yhdeksi merkiksi kaikissa merkkijonoliteraaleissa.

Wysiwyg on lyhennys sanoista "what you see is what you get", ja wysiwyg-merkkijonoissa kaikki merkit toistetaan uskollisesti. Wysiwyg-merkkijonot voidaan erotella joko r- tai '-merkein. Merkkijonot r"c:\textbackslash root\textbackslash foo.exe" ja \\          `c:\textbackslash root\textbackslash foo.exe' ovat esimerkkej‰ wysiwyg-merkkijonoista. Merkkijonot kaksinkertaisissa lainausmerkeiss‰ ovat "-merkkien ymp‰rˆimi‰. Ohjausmerkkej‰ voi sulauttaa n‰ihin merkkijonoihin monista ohjelmointikielist‰ tutulla \textbackslash -merkint‰tavalla, 
kuten esimerkiksi merkkijonossa "c:\textbackslash \textbackslash root\textbackslash \textbackslash foo.exe".
Heksamerkkijonot mahdollistavat merkkijonoliteraalien luomisen 	heksadatasta. Heksadatan ei tarvitse muodostaa hyv‰ksyttyj‰ UTF-merkkej‰. Valinnainen StringPostfix-merkki antaa merkkijonolle m‰‰ritellyn tyypin.

Rajoitetut merkkijonot k‰ytt‰v‰t useanlaisia erottimia, esimerkiksi merkkej‰ ja tunnuksia. Erottimen t‰ytyy saumattomasti jatkaa "-merkist‰ ilman v‰lilyˆntej‰, ja p‰‰tt‰v‰n erottimen t‰ytyy saumattomasti edelt‰‰ merkkijonon p‰‰tt‰v‰‰ "-merkki‰ ilman v‰lilyˆntej‰. 

Tekstialkiot alkavat merkeill‰ \mbox {q\{ ja p‰‰ttyv‰t merkkiin \}}. V‰liss‰ tulee olla valideja D-kielen tekstialkioita. Merkkiliteraalit ovat yksitt‰isi‰ merkkej‰ tai ohjausmerkkej‰, jotka on ymp‰rˆity yksinkertaisilla lainausmerkeill‰, ' '. 

Kokonaisluvut voidaan m‰‰ritell‰ useissa eri kantalukuj‰rjestelmiss‰. Kymmenj‰rjestelm‰n luvut ovat yksinkertaisesti kymmenj‰rjestelm‰n numeroiden sarjoja, mutta bin‰‰rij‰rjestelm‰n luvut koostuvat bin‰‰rij‰rjestelm‰n numeroista, joita edelt‰‰ merkkojono 0b. Liukuluvut voidaan esitt‰‰ sek‰ kymmenluku- ett‰ heksadesimaalij‰rjestelm‰ss‰. 

\subsubsection{D-kielen avainsanat}

\begin{center}
\begin{tabular}{lllll}
abstract & alias & align & asm & assert\\
auto & body & bool & break & byte  \\
case & cast & catch & cdouble & cent\\
cfloat & char & class & const & continue\\
creal & dchar & debug & delegate & delete\\
default & deprecated & do & double & else\\
enum & export & extern & false & final \\
finally & float & for & foreach & foreach\textunderscore reverse\\
function & goto & idouble & if & ifloat\\
immutable & import & in & inout & int\\
interface & invariant & ireal & is & lazy\\
long & macro & mixin & module & new\\
nothrow & null & out & override & package\\
pragma & private & protected & public & pure\\
real & ref & return & scope & shared\\
short & static & struct & super & switch\\
synchronized & template & this & throw & truetry\\
typedef & typeid & typeof & ubyte & ucent\\
uintn & ulong & union & unittest & ushort\\
version & void & volatile & wchar & while\\
with & \textunderscore \textunderscore FILE\textunderscore \textunderscore & \textunderscore \textunderscore LINE\textunderscore \textunderscore & \textunderscore \textunderscore gshared & \textunderscore \textunderscore traits\\
\textunderscore \textunderscore vector & \textunderscore \textunderscore parameters & \\ & \\ & \\
\end{tabular}
\end{center}

\subsection{Erlangin alkiorakenne}


Erlangin erottimet ovat:
\begin{verbatim}
( ) { } [ ] .  : | || ; , ? -> #
\end{verbatim}

Erlangin avainsanat ovat:
\begin{verbatim}
 after cond let when 
 begin end  of
 case  fun  query
 catch if   receive
\end{verbatim}

<<<<<<< HEAD
Erlangin operaattorit ovat: 
=======
Kaikki avainsanat ovat varattuja sanoja. Niiden lis‰ksi varattuja sanoja ovat:

\begin{verbatim}
band   bnot bor 
bsl    bsr  bxor
div    not  or  
orelse rem  try  
when  xor
\end{verbatim}

operaattorit: 
>>>>>>> 7035e06ecdf7c8f205da4192b3d10e15d82ee7c3
\begin{verbatim}
 +   -    *   /    div rem
 or  xor  bor bxor bsl bsr and band
 ==  /=   =:= =/=  =<  >   >=
 not bnot ++  --   =   !   <-
\end{verbatim}
Operaattoreita ei voi k‰ytt‰‰ atomiliteraaleina.

Ohjausmerkit (escape sequences):
\begin{verbatim}
\ b     backspace BS
\ d     delete DEL
\ e     escape ESC
\ f     form feed FF
\ n     linefeed LF
\ r     carriage return CR
\ s     space SPC
\ t     horizontal tab HT
\ v     vertical tab VT
\\      backslash \
\'      single quote '
\"      double quote "
\end{verbatim}
\textbackslash -merkill‰ voi kuvata myˆs oktaalinumeroita sek‰ ASCII-j‰rjestelm‰n erikoismerkkej‰.

Kokonaislukuliteraali voidaan ilmaista perinteiseen tapaan:
\begin{verbatim}
 1 2 3 666
\end{verbatim}
Tai merkitsem‰ll‰ ennen \#-merkki‰ luvun kantaluku:
\begin{verbatim}
 2#100100 16#FA66
\end{verbatim}
K‰‰nt‰j‰ ymm‰rt‰‰ em. tapauksissa tulkita luvut bin‰‰ri- ja heksadesimaaliluvuiksi.

Liukulukuliteraalit ilmaistaan mahdollisella etumerkill‰, kokonaislukuosalla, desimaaliosalla ja mahdollisella eksponenttiosalla:
\begin{verbatim}
 1.0 -5.1e6 0.346e-20
\end{verbatim}

Merkkiliteraali ilmaistaan \$ -merkin per‰‰n kirjoitetulla merkill‰ tai ohjausmerkill‰ (escape secuence) : 
\begin{verbatim}
 $R $s $$ $\\
\end{verbatim}

Merkkijonoliteraali ilmaistaan merkeill‰, jotka ovat \" -merkkien sis‰ll‰: 
\begin{verbatim}
 "Pekka J‰rvel‰" "\n"
\end{verbatim}



Atomiliteraalit ovat Erlangin erikoisuus. Ne ovat merkkijonoliteraalivakioita, joiden arvo on atomi itse. Atomeihin ei voi sitoa mit‰‰n arvoa. Esimerkiksi atomi 
\begin{verbatim}
 auto
\end{verbatim}
tarkoittaa autoa, eik‰ mit‰‰n muuta. Atomi alkaa pienell‰ kirjaimella, \textunderscore :lla tai \makeatletter @ \makeatother -merkill‰. Jos atomin haluaa aloittaa muulla tavoin, tulee se ymp‰rˆid‰ \' -merkeill‰.  

Muuttujan nimen tulee alkaa isolla kirjaimella,  \makeatletter @ \makeatother :ll‰, tai \textunderscore :lla:
\begin{verbatim}
 Data I 
\end{verbatim}
Koska mitk‰‰n varatut sanat, operaattorit tai avainsanat eiv‰t ala isolla kirjaimella, tulkintavirhe ei ole mahdollinen.  

Universaalimerkkin‰ k‰ytet‰‰n '\textunderscore' -merkki‰. Sen voidaan ajatella olevan mik‰ tahansa merkki. Hahmonsovituksessa t‰h‰n merkkiin vertautuu mik‰ tahansa arvo totena.  

\begin{verbatim}

/* blokkikommentti */ 
%	//rivin per‰‰n tuleva kommentti
%	/+ nesting blokkikommentti +/
\end{verbatim}

%\end{verbatim}
\subsection{Esimerkkej‰ ohjelmakoodista}
Alla on esimerkki D-kielen muuttujien n‰kyvyysalueista ja sis‰funktioista.
\begin{verbatim}
import std.stdio;

void main() {
 writeln("uloin a=", uloin());
}

int uloin() {
  int a=1;
  int keski() {
    int a=2;
    int sisin() {
      int a=3;
      return a;
    }
    writeln("sisin a=", sisin);
    return a;
  }
  writeln("keski a=", keski());
  return a;
}
\end{verbatim}
P‰‰ohjelmassa kutsutaan funktiota uloin(), joka kutsuu funktiota keski(), josta kutsutaan funktiota sisin(). Kaikissa funktioissa muuttujalla a on eri arvot, jonka kukin palauttaa kutsuvalle funktiolle. Ohjelman tuloste on seuraavanlainen:
\begin{verbatim}
sisin a=3
keski a=2
uloin a=1
\end{verbatim}
<<<<<<< HEAD
=======
D-kieless‰ voidaan muuttuja m‰‰ritell‰ myˆs auto, jolloin muuttujan tyyppi p‰‰tell‰‰n k‰‰nˆsvaiheessa. Alla on esimerkki t‰llaisesta.
\begin{verbatim}
import std.stdio;

void main() {
  auto str = "merkkijonoliteraali";
  auto i = 123456789098776543;
  writeln(str, " ja ulong ", i);
}
\end{verbatim}
Ohjelma tulostaa seuraavasti:
\begin{verbatim}
merkkijonoliteraali ja ulong 123456789098776543
\end{verbatim}
>>>>>>> 7035e06ecdf7c8f205da4192b3d10e15d82ee7c3

\subsection{Ratkaisujen vertailua}
D-kieli sis‰lt‰‰ paljon varattuja sanoja, joka on mahdollisesti osoitus paisuneesta kielest‰. Toisaalta kieli on melko rikas ja mahdollistaa erilaisia ohjelmointitapoja. Erlangissa varattuja sanoja on v‰h‰n. Molemmat kielet ovat vahvasti tyypitettyj‰. 
\section{Kielten syntaksi spesifikaatioissa}

D-kielen referenssidokumentti lˆytyy osoitteesta http://dlang.org. 


%ja tuloste n‰ytt‰‰ kuvan \ref{konsoli1} mukaiselta.
%\begin{figure}[tbh]
%%\begin{figure}[tbh] t= top, b = bottom, h=here
%\begin{center}
%\includegraphics[width=1.0\textwidth]{konsoli1.jpg}
%%\rotatebox{90}{\includegraphics[scale=.75]{esimerkki.pdf}}
%\caption{Tuloste konsolilla}
%\label{konsoli1}
%\end{center}
%\end{figure}

\section{Yhteenveto}
Yhteenvetona todettakoon, ett‰ D ja Erlang poikkeavat toisistaan...
\end{document}