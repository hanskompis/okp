\documentclass[11pt,oneside,a4paper]{article}
%\usepackage{ucs}
\usepackage{url}
\usepackage{hyperref}
\usepackage{lmodern}
\usepackage[pdftex]{graphicx}
\usepackage{textcomp}
\usepackage[latin1]{inputenc}
\usepackage[finnish]{babel}
\usepackage[T1]{fontenc}
\author{Jari Koskinen, Hansi Keijonen, Eero Laine}
\title{Ohjelmointikielten periaatteet 2013} 




\begin{document}
% kirjoita nimiä
\maketitle

\pagebreak

\tableofcontents

\pagebreak

\section{D ohjelmointikieli}
D on kehitetty korjaamaan C ja C++ kielten puutteita ja samalla siihen on lisätty paljon ominaisuuksia, joiden ansiosta...
D kielessä on ominaisuuksia plaaplaa... 
\begin{itemize}
\item Automaattinen roskienkeruu
\item Vahva tyypitys
\item Käännös natiivikoodiksi
\item Rinnakkaisuuden tuki
\end{itemize}
\section{Eeron lisäys}
D-kielen tunnuksissa voi olla kirjaimia, alaviivoja tai universal alphoja (wtf), ja ensimmäistä merkkiä lukuunottamatta myös numerot ovat käytössä. Tunnusta ei voi myöskään aloittaa kahdella alaviivalla. D-kieli on "case sensitive", eli isot ja pienet kirjaimet on eroteltu toisistaan. Varattuja sanoja on noin sata, esimerkiksi Javastakin löytyvät termit abstract, final, switch ja class.
	Literaalivakiot?
	Erottimet?
	Sisennyksillä ei väliä?
	For the curious, line break is defined as (\n )
Lisää kielestä plaaplaa

\section{Erlang ohjelmointikieli}
Erlang on funktionaalinen kieli, joka on tarkoitettu alunperin puhelinkeskusten ohjelmointiin. Tästä syystä kieli tukee hyvin rinnakkaisuutta...
\begin{verbatim}
-module(fibo).
-export([fibo/1, compfibo/2, fiboplus/1]).
fiboplus(N) -> compfibo(N,0) .
compfibo(N,S) -> Sum = fibo(S),
     if Sum > N -> Sum;
     true -> compfibo(N,S+1)
     end . 
fibo(0) -> 0 ;
fibo(1) -> 1 ;
fibo(N) when N > 1 -> fibo(N-1) + fibo(N-2) .
\end{verbatim}
\section{Kielten alkiorakenteen vertailu}
D on vahvasti tyypitetty kieli...
Seuraavat tietotyypit ovat tuettuna:
\begin{itemize}
\item Int
\item Double
\item Char
\item ...
\end{itemize}

D : Tunnukset alkavat kirjaimella, alaviiva(korvaa nämä alaviivasanat)-merkillä tai universal alphalla (jotainhämminkiä tässä, ota selvää!). Seuraavina merkkeinä voi olla mikä tahansa edellisistä ja tunnuksen pituus voi olla mielivaltainen. Kahdella alaviiva-merkillä alkavat tunnukset ovat varattuja.   

D: avainsanat ovat varattuja tunnuksia
\begin{verbatim}
abstract alias align asm assert auto body
bool break byte
case cast catch cdouble cent cfloat char class const 
continue creal dchar debug default delegate delete
deprecated do double else enum export extern false
final finally float for foreach foreach_reverse function 
goto idouble if ifloat immutable import in inout int 
interface invariant ireal is lazy long macro mixin 
module new nothrow null out override package 
pragma private protected public pure real ref 
return scope shared short static struct super
switch synchronized template this throw
truetry typedef typeid typeof ubyte ucent uint 
ulong union unittest ushort version void
volatile wchar while with __FILE__
 __LINE__ __gshared __traits __vector __parameters
\end{verbatim}
\begin{itemize}
\item merkkijonoliteraalit:
		wysiwyg-merkkijonot 
		lainausmerkein ymidyt merkkijonot
		heksamerkkijonot
		erotin-merkkijonot
		token-merkkijonot
\item merkkiliteraalit:
		yksi merkki tai escape-character -merkien sisalla
\item kokonaislukuliteraalit
		mieti miten kasitellaan
\item 	liukulukuliteraalit
		mieti miten kasitellaan
\end{itemize}
	
	
	


%\begin{verbatim}
%	/* blokkikommentti */ 
%	//rivin perŠŠn tuleva kommentti 
%	/+ nesting blokkikommentti +/
%\end{verbatim}
\subsection{Esimerkkejä ohjelmakoodista}
...
...
\subsection{Ratkaisujen vertailua}
...
...
\section{Kielten syntaksi}
\subsection{Rakenne}
Näin tulostetaan Hello World! D-kielellä.
\begin{verbatim}
import std.stdio;

void main() {
 writeln("Hello World!");
}
\end{verbatim}

Vastaavasti Erlangissa Hello World! toteutetaan näin:
\begin{verbatim}
-module(hello).
-export([hello_world/0]).

hello_world() -> 
  io:fwrite("hello, world\n").
\end{verbatim}
joka tulostaa konsolille kuvan \ref{konsoli2} mukaisesti.

\begin{figure}[tbh]
%\begin{figure}[tbh] t= top, b = bottom, h=here
%\begin{center}
%\includegraphics[width=0.5\textwidth]{konsoli2.png}
%\rotatebox{90}{\includegraphics[scale=.75]{esimerkki.pdf}}
\caption{Tuloste konsolilla}
\label{konsoli2}
%\end{center}
\end{figure}

Iteroinnissa C-kielestä tuttu tapa on mahdollinen

\begin{verbatim}
import std.stdio;

void main() {
  for(int i=0; i<10; i++) {
    writeln("Rivi: ", i);
  }
}
\end{verbatim}
Iteraatio voidaan tehdä myös seuraavasti:
\begin{verbatim}
import std.stdio;

void main() {
  foreach(i; 0 .. 10) {
    writeln("Rivi: ", i);
  }
}
\end{verbatim}

ja tuloste näyttää kuvan \ref{konsoli1} mukaiselta.
\begin{figure}[tbh]
%\begin{figure}[tbh] t= top, b = bottom, h=here
\begin{center}
\includegraphics[width=1.0\textwidth]{konsoli1.jpg}
%\rotatebox{90}{\includegraphics[scale=.75]{esimerkki.pdf}}
\caption{Tuloste konsolilla}
\label{konsoli1}
\end{center}
\end{figure}

\section{Yhtenveto}
Yhteenvetona todettakoon, että D ja Erlang poikkeavat toisistaan...
\end{document}