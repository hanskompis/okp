\documentclass[11pt,oneside,a4paper]{article}
%\usepackage{ucs}
\usepackage{url}
\usepackage{hyperref}
\usepackage{lmodern}
\usepackage[pdftex]{graphicx}
\usepackage{textcomp}
\usepackage[utf8]{inputenc}
\usepackage[finnish]{babel}
\usepackage[T1]{fontenc}
%opening
\title{D- ja Erlang-kielten tunnukset ja kontrollirakenteet}
\author{Hansi Keijonen, Jari Koskinen, Eero Laine}

\begin{document}

\maketitle

\newpage

\section{Tunnusten näkyvyysalueet ja sidonta}

% Erlangin lähestymistapa on erilainen kuin D-kielessä. Lohkorakenne perustuu
% produktioihin, jotka sisältävät otsikon ja rungon. Runko voi sisältää
% lausekkeita ja yksi produktio voi sisältää useampia runkoja. 

D-kielessä lohkot rajataan merkein \{ \}, ja ne voivat koostua lausekkeista
\cite{DLA13}. Lohkot sidotaan lausekkeeseen, luokkaan tai funktioon. Lohkolla
voidaan ilmaista myös nimetön näkyvyysalue, jos sitä ei ole sidottu funktioon,
luokkaan tai lausekkeeseen. Lohkon sisältä on näkyvyys lohkon ulkopuolelle,
mutta ulkopuolelta ei ole näkyvyyttä lohkon sisälle. Luokkien ja niiden
tietueiden näkyvyys voidaan kuitenkin sallia ulkopuolelle \cite{DLA13}.

Tunnusten sidonta D-kielessä tehdään staattisesti käännösaikana \cite{DLA13}.
Lohkon sisällä ei voida suoraan esitellä uudelleen ulompien tasojen näkyviä
muuttujia, mutta funktioiden ja tietuiden sisällä tämä on sallittua
\cite{DLA13}.

Lohkorakenne voi olla D-kielessä hyvinkin syvä, sillä se sallii funktion
sijoittamisen toisen funktion sisälle. Samoja muuttujia on mahdollista esitellä
sisemmissä funktioissa uudelleen. Muuttujan voi määritellä kuitenkin vain
sisemmässä funktiossa, esimerkiksi sisäkkäiset for-silmukat vaativat kukin omat
muuttujansa. Alla on esimerkki tällaisesta funktioiden sisäkkäin sijoittelusta,
jossa muuttuja määritetään uudelleen:

\begin{verbatim}
int i=0;

int uloin() {
    for(int i=0; i<5; i++) {
        int sisin() {
            int j=i;
                for(int i=j;i<5; i++) {
                    writeln("s: ",i);
                }
            return i;
            }
        writeln("u: ", i);
        sisin();
    }
return i;
}
\end{verbatim}
Erlang on litteä kieli, siinä voi olla lohkoja vain yhdellä tasolla.
Erlang-kielen määrittely ei varsinaisesti esittele lohkosääntöjä \cite{ERL99}.

Erlangissa lohkorakenne on toteutettu funktioita sisältävillä moduuleilla
\cite{HEB13}. Moduuli määritellään '-module(moduulin\textunderscore nimi)'
-ilmauksella moduulin ensimmäisellä rivillä.
Seuraavaksi 'export'-lauseella ilmaistaan, mitkä funktiot ovat kutsuttavissa
ohjelman ulkopuolelta. Funktio määritellään sen nimellä ja sulkeissa olevilla
parametreilla. Funktio alkaa sen nimestä, sisältää lausekkeita ja päättyy
pisteeseen. Erlangissa piste on lauseen tai funktion päättävä merkki. Alla on
esimerkki funktiosta:
\begin{verbatim}
-module(heippa).
-export([heippa/0]).
    heippa() ->
    io:format("Heippa, mualima!~n").
\end{verbatim}Kaikki D-kielen muuttujat kuuluvat ns. ensimmäiseen luokkaan \cite{DLA13}.
Muuttujia voidaan välittää parametrina, niihin voidaan sijoittaa arvoja ja
palauttaa funktion arvona. Kieli sallii myös funktioliteraalien sijoittamisen
funktiokutsun parametriksi.


\begin{verbatim}
void loop(int k, int j, void delegate() statement) { 
  for (int i = k; i < j; i++) { 
    statement(); 
  }
  
loop(5, 100, { d += 1; } ); 
loop(3, 10, { f += 3; } );
\end{verbatim}
D-kielessä sidonta tehdään staattisesti käännösaikana. Erlangissa sidonta sitä
vastoin on
dynaaminen. Erlangissa kaikki tyypit (arvot) ovat toisen asteen arvoja, koska
niitä voidaan asettaa muuttujien arvoiksi ja välittää parametreina funktioille.
Myös lambdat kuuluvat tähän kategoriaan \cite{HEB13}. 


\section{Kontrollin ja laskennan ohjaus - Erlang}

Jotta voidaan ymmärtää Erlangin kontrollirakenteita, pitää ensimmäisenä
selvittää hahmontunnistuksen mekanismi. Hahmontunnistus perustuu siihen, että
funktioon määritellään useita funktiokutsuja siten, että jokaisessa kutsussa
parametrit ovat lukumäärältään samat, mutta ovat arvoiltaan erilaiset. Toisin sanoen, kun 
funktiota kutsutaan tietyllä parametrilla, käydään järjestyksessä läpi eri
funktion kutsuvaihtoehdot ja ensimmäisen parametreihin sopivan
kutsuvaihtoehdon löytyessä toimitaan sen määrityksen mukaan. Helpoimmin asia
selviää esimerkin avulla \cite{HEB13}: 
\begin{verbatim}
1: tervehdi(mies, Nimi) -> io:format("Terppa, herra %s!",[Nimi]);
2: tervehdi(nainen,Nimi) -> io:format("Terppa, rouva %s!",[Nimi]);
3: tervehdi(_,Nimi) -> io:format("Terppa %s!",[Nimi]) . 
\end{verbatim}
Kutsuttaessa tervehdi-funktiota tervehdi(nainen,"Tuppurainen"), tutkitaan
ensiksi, sopivatko parametrit rivin 1 parametrisointivaihtoehtoon. Koska
parametrit olivat epäsopivat, 
yritetään kutsua sovittaa rivin kaksi parametrisointivaihtoehtoon. Tällä kertaa
parametrit sopivat, ja ohjelma tulostaa "Terppa, rouva Tuppurainen!". Jos
funktiota olisi kutsuttu
tervehdi(hermafrodiitti, "Höttölä"), olisivat vasta rivin 3 parametrit osuneet
oikeaan, ja silloin olisi toimittu tämän rivin määritysten mukaan. 
Rivin 3 toinen parametri on universaalimerkki, 
johon voi sovittaa minkä tahansa arvon.

Valintojen tekemiseen Erlangissa on edellä mainitun hahmonsovituksen lisäksi
mahdollista
käyttää if-lauseita, guardeja sekä in case of -rakennetta \cite{HEB13}.

Erlangissa if-rakenne ilmaistaan hieman esimerkiksi Javasta ja D:stä
poikkeavalla
tavalla, jota valotan seuraavassa esimerkissä. 

\begin{verbatim}
1: vertaa(N,M) -> 
2:     if N>M -> 1;
3:     if N<M -> -1;
4:     true -> 0
5:     end . 
\end{verbatim}
Esimerkkifunktiossa siis verrataan kahta lukua ja toimitaan sen
mukaan, mikä on vertailun tulos. Riveillä 2 ja 3 tutkitaan ovatko N ja M
erisuuruiset, mutta rivillä 4 on hieman erikoiselta
vaikuttava true, joka vastaa esimerkiksi D:n else:ä. Koko if-rakenne päätetään
end-sanaan ja pisteeseen. 

Guardit ovat Erlangin erikoisuus, joka on tuttu myös Haskellista. Guardit
ovat keino tehdä hahmonsovituksesta hieman ilmaisuvoimaisempaa \cite{HEB13}. Sen
sijaan, että
täysi-ikäisyyden osoittava ohjelma 
toteutettaisiin näin: 
\begin{verbatim}
taysi_ika(1) -> false;
taysi_ika(2) -> false;
taysi_ika(3) -> false;
.
.
.
taysi_ika(16) -> false;
taysi_ika(17) -> false;
taysi_ika(_) -> true;
\end{verbatim}
, toteutetaan iän tarkastaminen guardilla
\begin{verbatim}
taysi_ika(N) when N < 18 -> false;
taysi_ika(_) -> true . 
\end{verbatim}
Tällä tavoin voidaan jättää kirjoittamatta useita funktiokutsuvaihtoehtoja. 
On tärkeää muistaa, että guard-rakenteen tulee aina palauttaa true jollain
vaihtoehdolla, tai kääntäjä ilmoittaa virheestä.  

Erlangissa on myös case…of -rakenne, joka mahdollistaa monipuoliset
valintarakenteet, joihin voidaan yhdistää myös guardeja. Esimerkki selventää
rakennetta helpoiten:
\begin{verbatim}
biitsi(Lampotila) -> 
   case Lampotila of
        {calsius, N} when N >= 20, N =< 45 -> 'ihan jees';
        {kelvin, N}  when N >= 293, N =< 318 -> 'tieteellisesti jees';  
        {fahrenheit, N}  when N >= 68, N =< 113 -> 'amerikkalaisittain jees'; 
         _ -> 'ei niin jees' 
\end{verbatim}
Ohjelma saa siis parametrinaan tuplen, jossa on lämpötila-asteikko ja astemäärä.
Sen jälkeen case…of -rakenteessa tutkitaan, minkä periaatteen
mukaisesti astemäärää tutkitaan. Lopulta guardin avulla päätetään, onko
parametrina saatu lämpötila sopiva rantaelämään. Mielenkiintoinen kysymys on se, mihin
case…of -rakennetta tarvitaan, koska se on hyvin samanlainen funktiokutsujen
hahmonsovituksen kanssa. Valinta kannattaa perustaa henkilökohtaisiin
mieltymyksiin \cite{HEB13}. 

Erlangissa toistoa ja rekursiota ei voi erottaa toisistaan, koska rekursio on
ainoa tapa suorittaa toistorakenteita. Erlangissa ei siis ole for- tai while
-lauseita esimerkiksi D:n tai Javan tapaan. Listan läpikäynti Erlangissa
perustuu
siihen kielen ominaisuuteen, että
esimerkiksi kokonaislukuja sisältävä lista [1,2,3,4]  voidaan ilmoittaa myös
konstruktorioperaattoria '|' käyttäen [1|[2,3,4]], eli luku 1 liitetään listaan
[2,3,4]. Lista voidaan ilmoittaa myös head- ja tail-funktioita käyttäen
[Head|Tail] = [1,2,3,4] jolloin Head = 1 ja Tail = [2,3,4].
Jos halutaan käydä lista läpi yksinkertaisesti siten, että laskemme jokaisen
listan alkion yhteen, voidaan se Erlangissa tehdä esimerkiksi seuraavalla tavalla:

\begin{verbatim}
1. summa([]) -> 0;
2. summa(Lista) -> head + summa(Tail) .  
\end{verbatim}
Tässä funktiossa siis hahmonsovituksen avulla toteutetaan rekursiivinen listan
läpikäynti. Rivillä 1 on toteutettu alkeistapaus, jossa lista on tyhjä ja
jolloin alkioiden summa on 0. Rivillä kaksi summataan listan ensimmäinen alkio
(Head) loppulistan 
(Tail) alkioiden summan kanssa. Tällä tavoin voidaan tehdä monipuolisia listan
läpikäyntejä. 

Rekursio on Erlangissa hyvin tavanomainen tapa tehdä asioita senkin vuoksi, ettei
muita
toistorakenteita ole. Perinteinen rekursiolla tehtävä funktio on kertoma n!,
joka voidaan ilmaista yhtälöparilla 

\begin{displaymath}
n! = \left\{ \begin{array}{ll}
1 & \textrm{jos n=0}\\
n*((n-1)!) & \textrm{{jos n>0}}
\end{array} \right.
\end{displaymath}
Tämä on on helposti ja ulkoasultaan elegantisti toteutettavissa Erlangilla
hahmonsovitusta ja rekursiota hyväksikäyttäen:
\begin{verbatim}
1. kertoma(0) -> 1;
2. kertoma(N) when N > 0 -> N*(kertoma(N-1)) .
\end{verbatim}
Jälleen aluksi tarkistetaan alkeistapaus, joka on tässä tapauksessa luvun 0
kertoma. Jos tämä rivi ei ota kiinni, suoritetaan seuraavan rivin
rekursiivinen kutsu, jossa parametrilla N kerrotaan rekursiivisesti kutsuttavan
kertoma(N-1) tulos.
Kun rekursiokutsut saavuttavat tapauksen kertoma(0), palautuu tulos pitkin
kutsuketjua alkuun. Tämän lähestymistavan huono puoli on se, että tietokoneen
muistissa joudutaan pitämään koko ajan jokaisen kutsun 'välitulos'ja muistin
riittävyys saattaa muodostua ongelmaksi. 

Tämän ongelman voi ohittaa häntärekursiolla. Häntärekursiivinen kertomafunktio
toteutetaan toteuttamalla myös apufunktio hantakertoma(N,Acc) johon otetaan
mukaan vielä toinen parametri Acc. Acc.-parametriin tallennetaan laskennan 
välivaiheiden tulokset:
\begin{verbatim}
1. kertoma(N) -> hantakertoma(N,1) .
2.
3. hantakertoma (0,Acc) -> Acc;
4. hantakertoma(N,Acc) when N > 0 -> hantakertoma(N-1, Acc*N) .
\end{verbatim}
Tässä tapauksessa joudumme pitämään ainoastaan kaksi lukua muistissa koko
laskennan ajan, kun taas normaalissa rekursiossa joudumme pitämään muistissa kaikki
rekursiokutsuketjun välivaiheet. Jos unohdetaan se, kuinka paljon
lukujen 3 ja 1000 000 esittäminen kuluttaa muistia, kertoma(3) ja kertoma(1000000)
vaativat saman vakiomäärän muistia. 

\section{Kontrollin ja laskennan ohjaus - D}

\subsection{Valinta}

If-lause on toteutettu D:ssä melko tyypillisellä tavalla:

\begin{verbatim}
if (a==b) {
   writeln("A ja B ovat samoja.");
}
else {
   writeln("A ja B eivät ole samoja.");
}
\end{verbatim}
Toisin kuin muilla kielillä, D:llä ei ole ``tyhjän lauseen'' (empty statement)
konstruktiota. Koodinpätkä

\begin{verbatim}
if (a == b);
\end{verbatim}
ei siis ole D:n hyväksymää. Sen sijaan tulisi kirjoittaa

\begin{verbatim}
if (a == b) {}
\end{verbatim}
Else-lause on aina sidottu lähimpään if-lauseeseen. Esimerkiksi:

\begin{verbatim}
if (a == b)
   if (b == c)
      writeln("B ja C ovat samoja.");
   else
      writeln("B ja C eivät ole samoja.");
\end{verbatim}
Useat laskeutuvat (cascading) if-else -lauseet toteutetaan kuten C-kielessä.

D:n static if -lause on C-kielen \#if-rakennetta muistuttava kääntämisajan
(compile-time) selektori \cite{ALE10}.  Tullessaan static if -lauseen kohdalle
kääntäjä arvioi
ohjaavan lausekkeen. Jos lauseke ei ole tyhjä, vastaava koodi käännetään. Muussa
tapauksessa ainoastaan mahdollisen else-lause käännetään. 

Static if -lauseen testaama lauseke voi olla mikä vain if-testattava lauseke,
jota voidaan arvioida kääntämisen aikana. Mahdollisia lausekkeisiin kuuluvat
myös funktiokutsut.

Goto-lause toimii D:ssa allaolevalla tavalla:

\begin{verbatim}
goto <nimi>;
\end{verbatim}
D:ssa goto-lauseen käyttöön ei liity paljoa rajoituksia, mikä D:n pääkehittäjä
Andrei Alexandrescun mukaan tekee gotosta ongelmallisen työkalun \cite{ALE10}.
Goto voi
hypätä eteen- tai taaksepäin ja sisään ja ulos lauseista. Symbolin <nimi> tulee
kuitenkin olla näkyvissä funktiossa, missä gotoa kutsutaan. 

\subsection{Toisto}

While- ja do-while -lauseet ovat hyvin samankaltaisia, kuin vaikkapa
Java-kielessä. 

\begin{verbatim}
while (i => 0)
   --i;
\end{verbatim}
Kuten Javassa, koodin suoritus alkaa arvioimalla while-ehtoa. Jos lauseke ei ole
tyhjä, silmukan sisällä olevaa lause suoritetaan, ja silmukka alkaa uudestaan
while-ehdon arvionnilla. Do - while -lauseessa vastaava lauseke suoritetaan heti
kerran ennen while-ehdon tarkastelua. Allaolevassa esimerkissä näkyy myös D:ssä
pakollinen puolipiste lauseen lopussa.

\begin{verbatim}
do (--i) while (i => 0);
\end{verbatim}
For-lause on edelleen samankaltainen kuin Javassa.

\begin{verbatim}
for (int i = 0; i < 10; i++) 
   teeJotain(i);
\end{verbatim}
Listarakenteiden käsittelyyn foreach-lauseesta on olemassa allaoleva muoto:

\begin{verbatim}
foreach(kappale ; joukko) {
   teeJotain(kappale);
}
\end{verbatim}
Foreach-lause toimii siis kuten esimerkiksi Java-kielessä. Kappaleen viite
sidotaan vuorotellen jokaiseen joukko-listan elementtiin, ja teeJotain() -metodi
suoritetaan jokaisen elementin kohdalla. 

\subsection{Rekursio}

Rekursio toimii D:ssä kuten Java-kielessä. Allaolevassa esimerkissä lasketaan
kokonaisluvun kertoma rekursion avulla.

\begin{verbatim}
int kertoma(int n) {
  if(n<2) {
    return 1;
  }
  else
  {
    return n * kertoma(n-1);
  }
}
\end{verbatim}
Main-metodissa suoritetaan kertoma-metodi, jolle annetaan parametriksi
kokonaisluku n. Kertoma-metodi palauttaa luvun yksi, jos n on yksi, muuten
kutsutaan rekursiivisesti kertoma-metodia. Lukua siis kerrotaan itseään yhtä
pienemmän luvun kertomalla, kunnes päästään lukuun 1.  

Häntärekursiolla toteutettuna metodi näyttää tältä:
\begin{verbatim}
int kertoma(int n, int sum) {
  if(n==0) 
    return sum;
  else
    kertoma(n-1, sum * n);
}
\end{verbatim}
Nyt yhden kertoma-metodin suoritus loppuu toisen alkaessa, ja kertoma-metodi
pitää kertoman tuloa mukanaan. Viimeiseksi suoritettu kertoma-metodi palauttaa
loppusumman.


% \bibliographystyle{tktl}
% \bibliography{lahteet}
% %\bibliographystyle{tktl}
\bibliography{Lähteet}


\begin{thebibliography}{99}

\bibitem[ERL99]{ERL99} Erlang 4.7.3 Reference Manual, DRAFT (0.7), Jonas
Barklund, Robert Virding, 1999. 

\bibitem[DLA13]{DLA13} http://dlang.org, noudettu 6.2.2013.

\bibitem[HEB13]{HEB13} Learn You Some Erlang For Great Good, Fred Hébert, 2013.

\bibitem[ALE10]{ALE10} The D Programming Language, Andrei Alexandrescu, 2010.

\end{thebibliography}

\end{document}
